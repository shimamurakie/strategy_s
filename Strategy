public class StrategySample {
interface Strategy{ // インターフェース(Strategy)を作る
String function();
}
// アルゴリズムをクラスでカプセル化する
public static class ConcriteStrategyA implements Strategy{
public String function() {
return "処理Ａ";
}
}
public static class ConcriteStrategyB implements Strategy{
public String function() {
return "処理Ｂ";
}
}
public static class ConcriteStrategyC implements Strategy{
public String function() {
return "処理Ｃ";
}
}
public static String function(int id){ // アルゴリズムの切り替え
Strategy strategy;
if(id==1) strategy = new ConcriteStrategyA();
else if (id==2) strategy = new ConcriteStrategyB();
else strategy = new ConcriteStrategyC();
return strategy.function();
}
public static void main(String[] args){
System.out.println(function(2));
}
}
/*ストラテジとは
入出力は同じだけど条件によってアルゴリズムの交換を行いたい場合や、将来的にアルゴリズムが変更される可能性がある処理に遭遇する場面があります。 また、switch文などの条件分岐にアルゴリズムを埋め込むような処理を行うと、変更が発生した場合に他のアルゴリズムへ影響が生じたりコードが冗長になったりし、保守性がよくありません。
　ストラテジパターンは、アルゴリズムをクラス化することにより、アルゴリズムの切り替えを使用するクラスとは無関係に簡単に行えるようにするパターンです。
　なお、ストラテジは「戦略」という意味です。条件によってアルゴリズムを切り替えるところは、まるで戦略を練っているようですね。
　サルでもわかる 逆引きデザインパターンより引用
　*/
